--1 Find the total revenue generated by the company.
SELECT SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)) as TotalRevenue
FROM OrderDetails ;

--option arrondit à 2 chiffres apres la virgule : 
SELECT ROUND(SUM(OrderDetails.UnitPrice * OrderDetails.Quantity * (1 - OrderDetails.Discount)),2) as TotalRevenue
FROM OrderDetails ;

--2 Calculate the average revenue per order.
-- La sous-requête calcule d'abord le chiffre d'affaires total par commande.
-- Elle utilise une jointure entre les tables "Orders" et "OrderDetails" pour obtenir
-- les détails de chaque commande, calcule le chiffre d'affaires pour chaque ligne d'une
-- commande en multipliant le prix unitaire par la quantité et en soustrayant la remise,
-- puis agrège ces montants par  ID de commande à l'aide de la fonction SUM.
-- Ensuite, la requête principale calcule la moyenne de ces chiffres d'affaires
-- totaux par commande en utilisant la fonction AVG.

SELECT AVG(Sub.TotalRevenue) AS AverageRevenuePerOrder
FROM (
    SELECT SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) AS TotalRevenue
    FROM Orders o
    JOIN OrderDetails od ON o.OrderID = od.OrderID
    GROUP BY o.OrderID
) AS Sub;

--3 Find the top 5 best-selling products (by quantity sold)


SELECT TOP 5 p.ProductID, p.ProductName, SUM(od.Quantity) as TotalQuantitySold
FROM Products as p
JOIN OrderDetails as od ON p.ProductID = od.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalQuantitySold DESC;

--- sans renommer mais au final plus pratique de renommer

SELECT TOP 5 Products.ProductID, Products.ProductName, SUM(OrderDetails.Quantity)  as Totalquantitévendue
FROM Products
JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
GROUP BY Products.ProductID, Products.ProductName
ORDER BY Totalquantitévendue DESC;

-- 4 Display the total revenue generated per country, per customer, and also include a grand total

SELECT COALESCE(c.Country, 'Grand Total') as Country, COALESCE(c.CustomerID, 'Total') as CustomerID, COALESCE(c.CompanyName, 'All Customers') as CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue
FROM Customers as c
JOIN Orders as o ON c.CustomerID = o.CustomerID
JOIN OrderDetails as od ON o.OrderID = od.OrderID
GROUP BY ROLLUP (c.Country, c.CustomerID, c.CompanyName);

--Theme 2: Employee Performance

--5 Calculate the total sales per employee. ( comme on va classer par employé on fait un group by)
SELECT e.EmployeeID, e.FirstName, e.LastName, ROUND(SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)),2) as TotalSales
FROM Employees as e
JOIN Orders as o ON e.EmployeeID = o.EmployeeID
JOIN OrderDetails as od ON o.OrderID = od.OrderID
GROUP BY e.EmployeeID, e.FirstName, e.LastName;

--6 Find the top 3 employees with the highest average revenue per order.

SELECT TOP 3 e.EmployeeID, e.FirstName, e.LastName, AVG(TotalRevenue) as AverageRevenuePerOrder
FROM Employees as e
JOIN Orders as o 
ON e.EmployeeID = o.EmployeeID

JOIN (
    SELECT od.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue
    FROM OrderDetails as od
    GROUP BY od.OrderID
) as SubQuery ON o.OrderID = SubQuery.OrderID
--Cette partie effectue une autre jointure avec une sous-requête.
-- La sous-requête calcule le chiffre d'affaires total pour chaque commande dans la table "OrderDetails".
-- La jointure relie ces totaux de chiffre d'affaires aux commandes correspondantes dans la table "Orders" 
--en utilisant l'identifiant de commande (OrderID).
GROUP BY e.EmployeeID, e.FirstName, e.LastName
ORDER BY AverageRevenuePerOrder DESC;




--7 Total amount spent by customer 
SELECT c.CustomerID, c.CompanyName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalSpent
FROM Customers as c
JOIN Orders as o
ON c.CustomerID = o.CustomerID
JOIN OrderDetails as od
ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName;

--8 Find the top 5 customers with the highest average order value.
SELECT TOP 5 c.CustomerID, c.CompanyName, AVG(TotalOrderValue) as AverageOrderValue
FROM Customers as c
JOIN Orders as o ON c.CustomerID = o.CustomerID
JOIN (
    SELECT od.OrderID, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalOrderValue
    FROM OrderDetails as od
    GROUP BY od.OrderID
) as SubQuery ON o.OrderID = SubQuery.OrderID
GROUP BY c.CustomerID, c.CompanyName
ORDER BY AverageOrderValue DESC;

--9 total products supplied by supplier
SELECT s.SupplierID, s.CompanyName, COUNT(p.ProductID) as TotalProductsSupplied
FROM Suppliers as s
JOIN Products as p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName;

--10  top 3 suppliers
SELECT TOP 3 s.SupplierID, s.CompanyName, COUNT(p.ProductID) as TotalProductsSupplied
FROM Suppliers as s
JOIN Products as p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalProductsSupplied DESC;

-- 11 Calculate the total quantity of products supplied by each supplier.

SELECT s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) AS TotalQuantitySupplied
FROM Suppliers as s
JOIN Products as p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalQuantitySupplied DESC;


--A mon avis ça c est vrai 
SELECT p.SupplierID, s.CompanyName, SUM(od.Quantity) AS TotalQuantitySupplied
FROM  OrderDetails od
JOIN  Products p ON od.ProductID = p.ProductID
JOIN  Suppliers s ON p.SupplierID = s.SupplierID
GROUP BY p.SupplierID, s.CompanyName
Order BY TotalQuantitySupplied DESC;


--12 Find the top 3 suppliers with the highest total quantity of products supplied.


SELECT TOP 3 s.SupplierID, s.CompanyName, SUM(p.UnitsInStock) as TotalQuantitySupplied
FROM Suppliers as s
JOIN Products as p ON s.SupplierID = p.SupplierID
GROUP BY s.SupplierID, s.CompanyName
ORDER BY TotalQuantitySupplied DESC;


--13 Calculate the total quantity of products sold per category.
SELECT c.CategoryID, c.CategoryName, SUM(od.Quantity) as TotalQuantitySold
FROM Categories as c
JOIN Products as p ON c.CategoryID = p.CategoryID
JOIN OrderDetails as od ON p.ProductID = od.ProductID
GROUP BY c.CategoryID, c.CategoryName;

--14 Find the top 3 categories with the highest quantity of products sold.
SELECT TOP 3 c.CategoryID, c.CategoryName, SUM(od.Quantity) as TotalQuantitySold
FROM Categories as c
JOIN Products as p ON c.CategoryID = p.CategoryID
JOIN OrderDetails as od ON p.ProductID = od.ProductID
GROUP BY c.CategoryID, c.CategoryName
ORDER BY TotalQuantitySold DESC;

--15 Calculate the total revenue generated per category.

SELECT c.CategoryID, c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue
FROM Categories as c
JOIN Products as p ON c.CategoryID = p.CategoryID
JOIN OrderDetails as od ON p.ProductID = od.ProductID
GROUP BY c.CategoryID, c.CategoryName
ORDER BY TotalRevenue DESC;

--16 Find the top 3 categories with the highest revenue generated.
SELECT TOP 3 c.CategoryID, c.CategoryName, SUM(od.UnitPrice * od.Quantity * (1 - od.Discount)) as TotalRevenue
FROM Categories as c
JOIN Products as p ON c.CategoryID = p.CategoryID
JOIN OrderDetails as od ON p.ProductID = od.ProductID
GROUP BY c.CategoryID, c.CategoryName
ORDER BY TotalRevenue DESC;